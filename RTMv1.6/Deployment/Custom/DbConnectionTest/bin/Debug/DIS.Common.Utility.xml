<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DIS.Common.Utility</name>
    </assembly>
    <members>
        <member name="T:DIS.Common.Utility.ProtectConfigurationSection">
            <summary>
            Provides configuration section of encryption
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.ProtectConfigurationSection.ProtectConfigFile(System.Configuration.Configuration,System.String)">
            <summary>
            Encrypt connection string in config file
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:DIS.Common.Utility.ProtectConfigurationSection.ProtectConfigFile(System.Configuration.Configuration)">
            <summary>
            Encrypt connection string in config file
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:DIS.Common.Utility.ProtectConfigurationSection.IsWebConfiguration(System.String)">
            <summary>
            Return the config file's type.
            </summary>
            <param name="fileName"></param>
            <returns>
            true: is web.config
            false: is app.config
            </returns>
        </member>
        <member name="M:DIS.Common.Utility.ProtectConfigurationSection.OpenExeConfiguration(System.String)">
            <summary>
            Open the app.config file 
            </summary>
            <param name="configPath"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.ProtectConfigurationSection.OpenWebConfiguration(System.String)">
            <summary>
            Open the web.config file
            </summary>
            <param name="configPath"></param>
            <returns></returns>
        </member>
        <member name="T:DIS.Common.Utility.ExceptionHandler">
            <summary>
            Exception handler
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.ExceptionHandler.HandleException(System.Exception)">
            <summary>
            Handle an exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:DIS.Common.Utility.Serializer">
            <summary>
            Provides serialization methods
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.WriteToXml(System.Object,System.String,System.Boolean,System.IO.FileMode)">
            <summary>
            Serializes an object and write the XML string to disk.
            </summary>
            <param name="path"></param>
            <param name="obj"></param>
            <param name="indent"></param>
            <param name="fileMode"></param>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.ToXml(System.Object,System.Boolean)">
            <summary>
            Serializes an object to XML string.
            </summary>
            <param name="obj"></param>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.ReadFromXml``1(System.String,System.IO.FileMode)">
            <summary>
            Deserializes an object from the XML string read from disk.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="fileMode"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.FromXml``1(System.String)">
            <summary>
            Deserializes an object from XML string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.ToDataContract(System.Object)">
            <summary>
            Convert DataContract to XML
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.Serializer.FromDataContract``1(System.String)">
            <summary>
            Convert XML back to DataContract
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:DIS.Common.Utility.EncryptionHelper">
            <summary>
            Provides encryption methods
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.EncryptionHelper.AesEncrypt(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Encrypt data with AES algorithm
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.EncryptionHelper.AesDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt data with AES algorithm
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.EncryptionHelper.RsaEncrypt(System.Byte[],System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Encrypt data with RSA algorithm
            </summary>
            <param name="data"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.EncryptionHelper.RsaDecrypt(System.Byte[],System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Decrypt data with RSA algorithm
            </summary>
            <param name="data"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.EncryptionHelper.GetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Get an X.509 certificate from windows
            </summary>
            <param name="subject"></param>
            <param name="storeLocation"></param>
            <param name="storeName"></param>
            <returns></returns>
        </member>
        <member name="T:DIS.Common.Utility.MessageLogger">
            <summary>
            Message logger
            </summary>
        </member>
        <member name="F:DIS.Common.Utility.MessageLogger.LogsPerFile">
            <summary>
            Log count per file
            </summary>
        </member>
        <member name="F:DIS.Common.Utility.MessageLogger.SystemCategoryName">
            <summary>
            Category name of system logs
            </summary>
        </member>
        <member name="F:DIS.Common.Utility.MessageLogger.OperationCategoryName">
            <summary>
            Category name of operation logs
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.MessageLogger.GetMethodName">
            <summary>
            Get current method name
            </summary>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.MessageLogger.GetOperationLogTitle(System.String)">
            <summary>
            Get the title of operation logs
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.MessageLogger.LogOperation(System.String,System.String)">
            <summary>
            Log user operations
            </summary>
            <param name="userName"></param>
            <param name="message"></param>
        </member>
        <member name="M:DIS.Common.Utility.MessageLogger.LogSystemError(System.String,System.String)">
            <summary>
            Log system errors
            </summary>
            <param name="title"></param>
            <param name="message"></param>
        </member>
        <member name="M:DIS.Common.Utility.MessageLogger.LogSystemRunning(System.String,System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Log running infomation of system
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="eventType"></param>
        </member>
        <member name="T:DIS.Common.Utility.X509ProtectedConfigProvider">
            <summary>
            This provider will perform encryption and decryption using the keys from an X509 Certificate. 
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.X509ProtectedConfigProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            The key thing to note is that this provider expects CertSubjectThumbPrint to be defined in the [configProtectedData] section of the config
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:DIS.Common.Utility.X509ProtectedConfigProvider.Encrypt(System.Xml.XmlNode)">
            <summary>
            Encrypt data with X509 certificate
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.X509ProtectedConfigProvider.Decrypt(System.Xml.XmlNode)">
            <summary>
            Decrypt data with X509 certificate
            </summary>
            <param name="encryptedNode"></param>
            <returns></returns>
        </member>
        <member name="T:DIS.Common.Utility.HashHelper">
            <summary>
            Provides hash methods
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.HashHelper.GenerateRandomString(System.Int32)">
            <summary>
            Generates a random string.
            </summary>
        </member>
        <member name="M:DIS.Common.Utility.HashHelper.CreateHash``1(System.Byte[])">
            <summary>
            Creates hash value of data with specified hash provider.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.HashHelper.CreateHash``1(System.String)">
            <summary>
            Creates hash value of string with specified hash provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DIS.Common.Utility.HashHelper.CreateHmac``1(System.String,System.Byte[])">
            <summary>
            Creates HMAC value of data with specified HMAC provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
